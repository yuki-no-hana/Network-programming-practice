My name is Xingyu Zhao. ID is 3560177829. I have done the extra credit part.

My code file can be divided into 3 parts. 

The first part includes client.cpp, serverM.cpp, servera.cpp, and serverb.cpp. This part is necessary for the submission, and each .cpp file perform certain use. For example, client.cpp performs as a client, servera.cpp performs as server A. 

The second part includes tcpC.cpp, tcpS.cpp, udpC.cpp, and udpS.cpp. These four files are used to implement functions required for tcp client, tcp server, udp client, and udp server. These functions are integrated into 4 classes. For example, create a socket, bind, send, and receive.

The remaining files implement some functions and data structures that need to be used to process .txt input, convert data into string type for translation, convert string data into certain data type for fast calculation, split string, obtain intersection and difference between vectors, and so on.

For severa.cpp and serverb.cpp, they first preprocess the .txt input and use server_inputs data structure, implemented in data_structure.cpp, to store the data. Specifically, the name is stored in a string and the time interval is stored by vector<pair<int,int> >. Then, they create UDP client and UDP server to send and receive a message with the help of udpC.cpp, and udpS.cpp. Next, they receive a string message "serverM is boot up" to know the main server is ready and send the name list to serverM. Specifically, each name is separated by "," for simple split. Then, they will receive a string containing many user names split by ",". They convert these names string to vector<string> and find the time interval intersection, stored by vector<pair<int, int> > among them. Next, they convert the time interval intersection into a string with each time interval separated by ",". The string looks like "[[1,3],[4,6]]". If server A doesn't contain any name, server A will receive "Nobody" and restart the while loop and wait to receive. Such a process works for server B too. Finally, they receive a time interval if an input name is in their list. They delete this time interval. specifically, if there is no time interval after deletion, the name and an empty time interval vector<pair<int, int> >still exist.

For serverM.cpp, main server create TCP server, UDP client and UDP server with the help of serverM.cpp, servera.cpp, and serverb.cpp. After setting up these client and server, it transmits a message "serverM is boot up" to both server A and B. Then it receives two strings representing names in A and B, where name is concatenated and split by ",". The string is translated into vector<string> to store these data for convenience. Then the main server finds the difference and intersection. If nobody doesn't exist, main server prints nothing instead of "<username1, username2, ...> do not exist. Send a reply to the client." and send "Nobody" to the client. Else, print the username that does not exist in string format with names concatenated and split by "," and transmit these names to the client. If there are intersection names for server A and input username, the main server prints these names and sends these names the same format as above to A with the name split by ",". Else, the main server prints nothing and sends "[]" to server A. Such a process works for server B. Then, the main server receives strings from A and B that represent the time interval in string format like "[[1,3],[4,6]]". the main server converts this string to vector<pair<int, int>> and performs find_intersection to find the intersection time interval. Next, the main server converts the vector<pair<int, int>> into strings like "[[1,3],[4,6]]" or "[]" for no time interval and sends the string to the client. For the extra credit part, the main server receives the string indicating the chosen time interval like "[1,2]" and then transmit this message directly to server A and B.

For client.cpp, the client first create TCP client and connect to main server. Then, the client takes the user input. specifically, each name in the input should be separated by a single " " or multiple" ". user press "enter" to end input. The client performs strip and deletes redundant " "on input, and sends the string to the main server. Then, the client receives a message showing which input is not valid and print these names. If client receives "Nobody", it prints nothing. Next, it receives a string indicating the time interval intersection and prints this string. For extra credit part, the client translates this string to vector<int, int>> and takes the input. Specifically, the user input should contain two integers split by "," and capsulated by "[]" like "[1,2]". Also, the input time interval should be within the time intersection. For the invalid input, we print a prompt and ask user to input again. If it's a right input, we translate it to main server.

The project may fail when you input or restart too quickly. Also, the username input should be split by " " and the time interval input only contains one time interval. The project also fails in some special situations. For example, sometimes serverM send the message but serverB doesn't receive it. so the project fails. I can't handle it even though it works well on my computer. Also you should run make clean after make all. RUn make clean before make all cause errors.

Note that although make all only run 4 commands and compile only 4 cpp files, all file are compiled because other files are included in the 4 cpp files. 